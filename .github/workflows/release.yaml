name: Release
on:
  push:
    tags:
      - "v*.*.*"
env:
  MACOSX_DEPLOYMENT_TARGET: 10.7

# TODO: do we want to do something if there is a failure

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create GitHub release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} --draft -t "Version ${{ github.ref_name }}"

  build-release:
    name: Build Release Assets
    needs: ["create-release"]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: i686-unknown-linux-gnu
            os: ubuntu-latest
          - target: i686-unknown-linux-musl
            os: ubuntu-latest
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
#          - target: arm-unknown-linux-musleabihf
#            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macOS-latest
          - target: aarch64-apple-darwin
            os: macOS-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: i686-pc-windows-msvc
            os: windows-latest
# TODO: these dont work
#          - target: x86_64-pc-windows-gnu
#            os: windows-latest
#          - target: i686-pc-windows-gnu
#            os: windows-latest
#             use-cross: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Setup rust target
        run: rustup target add ${{ matrix.target }}

      # Only install cross if we need it
      # Install via cargo-binstall which I found faster
      - name: Install Cross
        # if: matrix.command == 'cross'
        if: ${{ matrix.use-cross || matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
          cargo binstall --no-confirm cross

      # From openssl crate (https://docs.rs/openssl/latest/openssl/#automatic) install dependencies
      - name: Install system dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install pkg-config libssl-dev
        # export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig
        #   run pkg_config fail: pkg-config has not been configured to support cross-compilation.
        # Install a sysroot for the target platform and configure it via
        #  PKG_CONFIG_SYSROOT_DIR and PKG_CONFIG_PATH, or install a
        #  cross-compiling wrapper for pkg-config and set it via
        #  PKG_CONFIG environment variable.
      - name: Build [Cargo]
        if: matrix.os != 'ubuntu-latest'
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Build [Cross]
        if: matrix.os == 'ubuntu-latest'
        run: cross build --release --locked --target ${{ matrix.target }}

#      - name: Build release binary
#        run: cargo build --release --locked --target ${{ matrix.target }}
        # TODO: how to install necessary deps for cross?
#        uses: actions-rs/cargo@v1
#        with:
#          command: build
#          args: --verbose --release --locked --target ${{ matrix.target }}
#          use-cross: ${{ matrix.use-cross || matrix.os == 'ubuntu-latest' }}
          # use-cross: ${{ matrix.use-cross }}

      - name: Prepare binaries [-linux]
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          strip snippext || true
          tar czvf ../../../snippext-${{ github.ref_name }}-${{ matrix.target }}.tar.gz snippext
          cd -

      - name: Prepare binaries (zip) [Windows]
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          strip snippext.exe
          7z a ../../../snippext-${{ github.ref_name }}-${{ matrix.target }}.zip snippext.exe
          cd -

      - name: Prepare binaries (tar) [Windows]
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          strip snippext.exe
          7z a -ttar archive.tar snippext.exe
          7z a -tgzip ../../../snippext-${{ github.ref_name }}-${{ matrix.target }}.tar.gz archive.tar
          cd -


      - name: Upload release archive
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Version ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: snippext-${{ github.ref_name }}-${{ matrix.target }}*


  # Mark the GitHub Releaseâ„¢ as a non-draft now that everything has succeeded!
  publish-release:
    # Only run after all the other tasks, but it's ok if upload-artifacts was skipped
    needs: [create-release, build-release]
    # if: ${{ always() && needs.create-release.result == 'success' && needs.build-release.result == 'success' }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: mark release as non-draft
        run: |
          gh release edit ${{ github.ref_name }} --draft=false